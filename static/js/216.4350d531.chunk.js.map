{"version":3,"file":"static/js/216.4350d531.chunk.js","mappings":"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","sources":["webpack://gilanis/./src/components/Login/AuthForm.module.css?8cd9","components/Login/AuthForm.js","components/Pages/LoginPage.js","hooks/use-Http.js","hooks/use-input.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"auth\":\"AuthForm_auth__-TECN\",\"control\":\"AuthForm_control__4A9Is\",\"actions\":\"AuthForm_actions__WXgFv\",\"toggle\":\"AuthForm_toggle__6ngHr\",\"invalid\":\"AuthForm_invalid__DgLz7\",\"eyeIcon\":\"AuthForm_eyeIcon__zW7mP\"};","import classes from \"./AuthForm.module.css\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport { AuthSliceActions } from \"../../store/auth-slice/AuthSlice\";\nimport { storeToken } from \"../../store/auth-slice/AuthActionCreators\";\nimport useHttp from \"../../hooks/use-Http\";\nimport useInput from \"../../hooks/use-input\";\nimport { BsEye, BsEyeSlash } from \"react-icons/bs\";\n\nconst AuthForm = () => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const PasswordRef = useRef();\n  const [LoginIn, setLoginIn] = useState(true);\n  const [LoggingIn, setLoggingIn] = useState(false);\n  const [passwordVisible, setPasswordVisible] = useState(false);\n  const [formIsValid, setFormIsValid] = useState(false);\n  const { sendRequest, error } = useHttp();\n  const {\n    value: enteredEmail,\n    error: enteredEmailError,\n    isValid: enteredEmailIsValid,\n    inputHandler: emailChangeHandler,\n    blurHandler: emailBlurHandler,\n    clear: emailClear,\n  } = useInput((value) =>\n    value\n      .toLowerCase()\n      .match(\n        /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n      )\n  );\n  const {\n    value: enteredPassword,\n    error: enteredPasswordError,\n    isValid: enteredPasswordIsValid,\n    inputHandler: passwordChangeHandler,\n    blurHandler: passwordBlurHandler,\n    clear: passwordClear,\n  } = useInput((value) =>\n    value.match(/(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[^A-Za-z0-9])(?=.{8,})/)\n  );\n\n  const switchAuthModeHandler = () => {\n    setLoginIn((prevState) => !prevState);\n  };\n\n  const toggleVisibilityHandler = () => {\n    setPasswordVisible((prevState) => !prevState);\n    const type =\n      PasswordRef.current.getAttribute(`type`) === \"password\"\n        ? \"text\"\n        : \"password\";\n    PasswordRef.current.setAttribute(`type`, type);\n  };\n\n  useEffect(() => {\n    if (enteredEmailIsValid && enteredPasswordIsValid) {\n      setFormIsValid(true);\n    } else {\n      setFormIsValid(false);\n    }\n  }, [enteredEmailIsValid, enteredPasswordIsValid]);\n\n  const submitHandler = async (event) => {\n    event.preventDefault();\n\n    if (!formIsValid) return;\n\n    const firebaseUrl = LoginIn\n      ? `https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyDvXaGgOIHB37ZcWDqO-6kleELjRMa-3Ns`\n      : `https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyDvXaGgOIHB37ZcWDqO-6kleELjRMa-3Ns\n    `;\n\n    const requestData = {\n      url: firebaseUrl,\n      method: \"POST\",\n      body: {\n        email: enteredEmail,\n        password: enteredPassword,\n        returnSecureToken: true,\n      },\n      headers: { \"Content-Type\": \"application/json\" },\n    };\n\n    const dataGrabber = (data) => {\n      if (LoginIn && data) {\n        setLoggingIn(true);\n\n        const token = data.idToken;\n        const expiryTime = new Date(\n          new Date().getTime() + +data.expiresIn * 1000\n        ).toISOString();\n\n        setTimeout(() => {\n          dispatch(AuthSliceActions.login(token));\n          dispatch(storeToken(token, expiryTime));\n          navigate(`/home`, { replace: true });\n        }, 2000);\n      } else {\n        navigate(`/home`, { replace: true });\n      }\n    };\n\n    sendRequest(requestData, dataGrabber);\n\n    emailClear();\n    passwordClear();\n  };\n\n  const emailClasses = enteredEmailError\n    ? `${classes.control} ${classes.invalid}`\n    : `${classes.control}`;\n  const passwordClasses = enteredPasswordError\n    ? `${classes.control} ${classes.invalid}`\n    : `${classes.control}`;\n\n  return (\n    <section className=\"app-bg section-padding\">\n      <div className={classes.auth}>\n        {error && (\n          <div className=\"flex-center\">\n            <div>\n              <p className=\"p-opensans\">{error.message}</p>\n            </div>\n            <div>\n              <button\n                type=\"button\"\n                style={{\n                  marginTop: `2rem`,\n                  fontFamily: `var(--font-alt)`,\n                  fontWeight: 400,\n                }}\n                className=\"custom-button\"\n                onClick={() => navigate(`/home`, { replace: true })}\n              >\n                Retry\n              </button>\n            </div>\n          </div>\n        )}\n        {!error && (\n          <React.Fragment>\n            <h1 className=\"headtext-cormorant\">\n              {LoginIn ? \"Login\" : \"Sign Up\"}\n            </h1>\n            <form onSubmit={submitHandler}>\n              <div className={emailClasses}>\n                <label htmlFor=\"email\">Your Email</label>\n                <input\n                  type=\"email\"\n                  id=\"email\"\n                  value={enteredEmail}\n                  onChange={emailChangeHandler}\n                  onBlur={emailBlurHandler}\n                  placeholder=\"johndoe@johndoe.com\"\n                  required\n                />\n                {enteredEmailError && (\n                  <p className=\"p-opensans\">Please enter a valid e-mail</p>\n                )}\n              </div>\n              <div className={passwordClasses}>\n                <label htmlFor=\"password\">Your Password</label>\n                <div style={{ position: \"relative\" }}>\n                  <input\n                    type=\"password\"\n                    id=\"password\"\n                    value={enteredPassword}\n                    onChange={passwordChangeHandler}\n                    onBlur={passwordBlurHandler}\n                    min={8}\n                    placeholder=\"Abcdef5.\"\n                    required\n                    ref={PasswordRef}\n                  />\n                  {passwordVisible && (\n                    <BsEyeSlash\n                      className={classes.eyeIcon}\n                      size={25}\n                      onClick={toggleVisibilityHandler}\n                    />\n                  )}\n                  {!passwordVisible && (\n                    <BsEye\n                      className={classes.eyeIcon}\n                      size={25}\n                      onClick={toggleVisibilityHandler}\n                    />\n                  )}\n                </div>\n                {enteredPasswordError && (\n                  <p className=\"p-opensans\">\n                    Password must contain one uppercase letter, one special\n                    character (,.?!), and is at least eight characters.\n                  </p>\n                )}\n              </div>\n              <div className={classes.actions}>\n                {LoggingIn && <button>Please Wait...</button>}\n                {!LoggingIn && (\n                  <button>{LoginIn ? \"Login\" : \"Create Account\"}</button>\n                )}\n                <button\n                  style={{ marginBottom: `2rem` }}\n                  type=\"button\"\n                  className={classes.toggle}\n                  onClick={switchAuthModeHandler}\n                >\n                  {LoginIn\n                    ? \"Create new account\"\n                    : \"Login with existing account\"}\n                </button>\n              </div>\n            </form>\n          </React.Fragment>\n        )}\n      </div>\n    </section>\n  );\n};\n\nexport default AuthForm;\n","import React from \"react\";\nimport AuthForm from \"../Login/AuthForm\";\n\nconst LoginPage = () => {\n  return (\n    <React.Fragment>\n      <AuthForm />\n    </React.Fragment>\n  );\n};\n\nexport default LoginPage;\n","import { useCallback, useState } from \"react\";\n\nconst TIMEOUT = (sec) => {\n  return new Promise((_, reject) => {\n    setTimeout(() => {\n      reject(new Error(`Request Failed! Session Timeout after ${sec} seconds`));\n    }, sec * 1000);\n  });\n};\n\nconst useHttp = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  const sendRequest = useCallback(async (requestConfig, dataGrabber) => {\n    setIsLoading(true);\n    try {\n      const { url, method, headers, body } = requestConfig;\n      const response = await Promise.race([\n        fetch(url, {\n          method: method ?? `GET`,\n          body: JSON.stringify(body) ?? null,\n          headers: headers ?? {},\n        }),\n        TIMEOUT(10),\n      ]);\n\n      if (!response.ok)\n        throw new Error(\n          `${response.status}! Sorry, Your request failed to execute.`\n        );\n\n      const result = await response.json();\n\n      dataGrabber(result);\n    } catch (error) {\n      setError(error);\n    }\n    setIsLoading(false);\n  }, []);\n\n  return {\n    isLoading,\n    error,\n    sendRequest,\n  };\n};\n\nexport default useHttp;\n","import { useReducer } from \"react\";\n\nconst inputReducer = (state, action) => {\n  if (action.type === `INPUT`) {\n    return {\n      value: action.value,\n      isTouched: state.isTouched,\n    };\n  }\n\n  if (action.type === `BLUR`) {\n    return {\n      value: state.value,\n      isTouched: true,\n    };\n  }\n\n  if (action.type === `CLEAR`) {\n    return {\n      value: ``,\n      isTouched: false,\n    };\n  }\n};\nconst useInput = (validateInput) => {\n  const [inputState, dispatchInputStateActions] = useReducer(inputReducer, {\n    value: ``,\n    isTouched: false,\n  });\n\n  const isInputValid = validateInput(inputState.value);\n  const hasError = !isInputValid && inputState.isTouched;\n\n  const inputValueChangeHandler = (event) => {\n    dispatchInputStateActions({ type: `INPUT`, value: event.target.value });\n  };\n\n  const inputBlurHandler = () => {\n    dispatchInputStateActions({ type: `BLUR` });\n  };\n\n  const clearInput = () => {\n    dispatchInputStateActions({ type: `CLEAR` });\n  };\n\n  return {\n    value: inputState.value,\n    isValid: isInputValid,\n    error: hasError,\n    inputHandler: inputValueChangeHandler,\n    blurHandler: inputBlurHandler,\n    clear: clearInput,\n  };\n};\n\nexport default useInput;\n"],"names":["dispatch","useDispatch","navigate","useNavigate","PasswordRef","useRef","useState","LoginIn","setLoginIn","LoggingIn","setLoggingIn","passwordVisible","setPasswordVisible","formIsValid","setFormIsValid","useHttp","sendRequest","error","useInput","value","toLowerCase","match","enteredEmail","enteredEmailError","enteredEmailIsValid","isValid","emailChangeHandler","inputHandler","emailBlurHandler","blurHandler","emailClear","clear","enteredPassword","enteredPasswordError","enteredPasswordIsValid","passwordChangeHandler","passwordBlurHandler","passwordClear","toggleVisibilityHandler","prevState","type","current","getAttribute","setAttribute","useEffect","submitHandler","event","preventDefault","url","method","body","email","password","returnSecureToken","headers","data","token","idToken","expiryTime","Date","getTime","expiresIn","toISOString","setTimeout","AuthSliceActions","storeToken","replace","emailClasses","classes","passwordClasses","className","message","style","marginTop","fontFamily","fontWeight","onClick","onSubmit","htmlFor","id","onChange","onBlur","placeholder","required","position","min","ref","size","marginBottom","TIMEOUT","sec","Promise","_","reject","Error","isLoading","setIsLoading","setError","useCallback","requestConfig","dataGrabber","race","fetch","JSON","stringify","response","ok","status","json","result","inputReducer","state","action","isTouched","validateInput","useReducer","inputState","dispatchInputStateActions","isInputValid","hasError","target"],"sourceRoot":""}